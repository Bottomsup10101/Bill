#include <iostream> #include <vector> #include <algorithm> using namespace std;

#define INF 9999
#define V 5


void primMST(int graph[V][V]) { int parent[V];
int key[V]; bool mstSet[V];
 
for (int i = 0; i < V; i++) { key[i] = INF;
mstSet[i] = false;
}


key[0] = 0;
parent[0] = -1;


for (int count = 0; count < V - 1; count++) { int minKey = INF, minIndex;

for (int v = 0; v < V; v++) {
if (!mstSet[v] && key[v] < minKey) { minKey = key[v];
minIndex = v;
}
}


int u = minIndex; mstSet[u] = true;
 
for (int v = 0; v < V; v++) {
if (graph[u][v] && !mstSet[v] && graph[u][v] < key[v]) { parent[v] = u;
key[v] = graph[u][v];
}
}
}


cout << "Prim's MST:\n"; for (int i = 1; i < V; i++) {
cout << parent[i] << " - " << i << " \t" << graph[i][parent[i]] <<
"\n";
}
}


struct Edge {
int src, dest, weight;
};


bool compareEdge(Edge a, Edge b) { return a.weight < b.weight;
 
}


int findParent(int parent[], int i) { if (parent[i] == -1)
return i;
return findParent(parent, parent[i]);
}


void unionNodes(int parent[], int x, int y) { int xset = findParent(parent, x);
int yset = findParent(parent, y); parent[xset] = yset;
}


void kruskalMST(vector<Edge>& edges, int numVertices) { sort(edges.begin(), edges.end(), compareEdge);

vector<Edge> result;
int parent[numVertices];


for (int i = 0; i < numVertices; i++)
 
parent[i] = -1;


for (Edge& edge : edges) {
int x = findParent(parent, edge.src); int y = findParent(parent, edge.dest);

if (x != y) { result.push_back(edge); unionNodes(parent, x, y);
}
}


cout << "Kruskal's MST:\n"; for (Edge& edge : result) {
cout << edge.src << " - " << edge.dest << " \t" << edge.weight <<
"\n";
}
}


int main() {
int graph[V][V] = {
 
{0, 2, 0, 6, 0},
{2, 0, 3, 8, 5},
{0, 3, 0, 0, 7},
{6, 8, 0, 0, 9},
{0, 5, 7, 9, 0}
};


primMST(graph);


vector<Edge> edges = {
{0, 1, 2}, {1, 2, 3}, {0, 3, 6}, {1, 3, 8},
{1, 4, 5}, {2, 4, 7}, {3, 4, 9}
};


kruskalMST(edges, V);


return 0;
}

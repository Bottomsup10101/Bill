#include<iostream>
using namespace std;
const int size = 80;
class Stack {
char a[size]; // Array to store stack elements
int top; // Index for the top of the stack
public:
Stack() { top = -1; } // Constructor initializes top to -1 (empty stack)
void push(char x) {
if (top == size - 1) { // Check for stack overflow
cout << "Stack overflow\n";
return;
}
a[++top] = x; // Increment top and add the element
}
// Pop function to remove elements from the stack
char pop() {
if (top == -1) { // Check for stack underflow
cout << "Stack underflow\n";
exit(0);
}
return a[top--]; 
}
int empty() {
return (top == -1);
}
};
int precedence(char ch) {
if (ch == '$') return 3;
else if (ch == '*' || ch == '/') return 2; 
else if (ch == '+' || ch == '-') return 1; // Addition/Subtraction precedence
return 0; // For non-operators like parentheses
}
int isOperand(char ch) {
return (ch >= 'A' && ch <= 'Z') || (ch >= 'a' && ch <= 'z') || (ch >= '0' && ch <= '9');
}
void convertToPostfix(char* infix, char* postfix) {
Stack s1; // Stack to hold operators and parentheses
char symbol, stackSymbol;
int i = 0, j = 0, flag;
while (infix[i] != '\0') {
symbol = infix[i];
if (isOperand(symbol)) {
postfix[j++] = symbol;
}
// If the symbol is '(', push it onto the stack
else if (symbol == '(') {
s1.push(symbol);
}
// If the symbol is an operator, handle precedence
else if (symbol == '+' || symbol == '-' || symbol == '*' || symbol == '/' || symbol == '$')
{
if (s1.empty()) { // If stack is empty, push the operator onto the stack
s1.push(symbol);
} else {
flag = 0;
stackSymbol = s1.pop(); // Pop the top of the stack
// Compare precedence and add to postfix as needed
while (precedence(stackSymbol) >= precedence(symbol)) {
postfix[j++] = stackSymbol;
if (s1.empty()) {
flag = 1; // Stack is empty, break the loop
break;
}
stackSymbol = s1.pop(); // Pop next element for comparison
}
// Push the previously popped operator back onto the stack
if (flag == 0) {
s1.push(stackSymbol);
}
// Finally, push the current operator onto the stack
s1.push(symbol);
}
}
// If the symbol is ')', pop and append everything until '('
else if (symbol == ')') {
stackSymbol = s1.pop();
while (stackSymbol != '(') {
postfix[j++] = stackSymbol;
stackSymbol = s1.pop(); // Continue popping until '(' is found
}
}
i++;
}
// Pop remaining operators from the stack and append to postfix expression
while (!s1.empty()) {
postfix[j++] = s1.pop();
}
postfix[j] = '\0'; // Null-terminate the postfix expression
}
// Function to convert infix expression to prefix expression
void convertToPrefix(char* infix, char* prefix) {
Stack s1; // Stack to hold operators and parentheses
char symbol, stackSymbol;
int i = 0, j = 0, flag;
// Reverse the infix expression
int len = 0;
while (infix[len] != '\0') len++;
for (int k = 0; k < len / 2; k++) {
swap(infix[k], infix[len - 1 - k]);
}
// Loop through each character of the reversed infix expression
while (infix[i] != '\0') {
symbol = infix[i];
// If the symbol is an operand, add it to the prefix expression
if (isOperand(symbol)) {
prefix[j++] = symbol;
}
// If the symbol is ')', push it onto the stack (reverse logic for '(')
else if (symbol == ')') {
s1.push(symbol);
}
// If the symbol is an operator, handle precedence
else if (symbol == '+' || symbol == '-' || symbol == '*' || symbol == '/' || symbol == '$')
{
if (s1.empty()) { // If stack is empty, push the operator onto the stack
s1.push(symbol);
} else {
flag = 0;
stackSymbol = s1.pop(); // Pop the top of the stack
// Compare precedence and add to prefix as needed
while (precedence(stackSymbol) > precedence(symbol)) {
prefix[j++] = stackSymbol;
if (s1.empty()) {
flag = 1; // Stack is empty, break the loop
break;
}
stackSymbol = s1.pop(); // Pop next element for comparison
}
// Push the previously popped operator back onto the stack
if (flag == 0) {
s1.push(stackSymbol);
}
// Finally, push the current operator onto the stack
s1.push(symbol);
}
}
// If the symbol is '(', pop and append everything until ')' (reverse logic for ')')
else if (symbol == '(') {
stackSymbol = s1.pop();
while (stackSymbol != ')') {
prefix[j++] = stackSymbol;
stackSymbol = s1.pop(); // Continue popping until ')' is found
}
}
i++;
}
// Pop remaining operators from the stack and append to prefix expression
while (!s1.empty()) {
prefix[j++] = s1.pop();
}
prefix[j] = '\0'; // Null-terminate the prefix expression
// Reverse the prefix expression to get the final result
for (int k = 0; k < j / 2; k++) {
swap(prefix[k], prefix[j - 1 - k]);
}
}
int main() {
char infix[80], postfix[80], prefix[80]; // Arrays to hold the infix, postfix, and prefix
expressions
cout << "Enter a valid infix expression: ";
cin >> infix; // Input the infix expression from the user
// Convert the infix expression to postfix
convertToPostfix(infix, postfix);
cout << "The converted postfix expression is: " << postfix << endl;
// Convert the infix expression to prefix
convertToPrefix(infix, prefix);
cout << "The converted prefix expression is: " << prefix << endl;
return 0;
}
